apply plugin: 'com.android.library'

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion
    publishNonDefault true

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        // ref https://github.com/square/okio/issues/58
        warning 'InvalidPackage'
        abortOnError false
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
        }

        release {
            zipAlignEnabled true
            minifyEnabled false
            debuggable false
            jniDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'

        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    // Local Dependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])
    
    // Support Library
    compile "com.android.support:support-annotations:$supportLibraryVersion"

    // Gson
    compile "com.google.code.gson:gson:$gsonVersion"

    // Retrofit2
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // OkHttp3
    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // Dagger2
    compile "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    
    // Crashlytics Kit
    compile("com.crashlytics.sdk.android:crashlytics:$fabricVersion@aar") {
        transitive = true
    }
    
    // LeakCanary
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    androidTestCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    
    // Unit tests dependencies
    testCompile "junit:junit:$junitVersion"

    testCompile "org.mockito:mockito-core:$mockitoVersion"

    testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
    testCompile "org.powermock:powermock-api-mockito:$powermockVersion"
}

android.testOptions.unitTests.all {
    // full options: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    forkEvery = 4
    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        exceptionFormat 'full'
    }
    reports {
        html.enabled = false
        junitXml.enabled = false
    }
    include rootProject.hasProperty("testSuite") ? "**/${rootProject.ext.testSuite}.class" : "**/*Test.class"
}