apply plugin: 'com.android.application'
apply plugin: 'let'

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        applicationId 'com.mabdurrahman.crossover.exercise'
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName '0.0.1_SNAPSHOT'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    
    lintOptions {
        warning 'InvalidPackage'
        abortOnError false
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
        }

        release {
            zipAlignEnabled true
            minifyEnabled false
            debuggable false
            jniDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'

        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    // Local Dependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])
    
    debugCompile project(path: ':core', configuration: 'debug')
    releaseCompile project(path: ':core', configuration: 'release')
    
    // Support Library
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    
    // Google Play Services
    compile "com.google.android.gms:play-services-maps:$playServicesVersion"
    compile "com.google.android.gms:play-services-location:$playServicesVersion"
    
    // Butter Knife
    compile "com.jakewharton:butterknife:$butterknifeVersion"
    
    // Icepick
    compile "frankiesardo:icepick:$icepickVersion"
    provided "frankiesardo:icepick-processor:$icepickVersion"
    
    // Material Helpers
    compile("com.github.afollestad.material-dialogs:core:$materialDialogsVersion@aar") {
        transitive = true
    }
    compile("com.github.afollestad.material-dialogs:commons:$materialDialogsVersion@aar") {
        transitive = true
    }
    compile "com.pnikosis:materialish-progress:$materialishProgressVersion"
    compile "com.rengwuxian.materialedittext:library:$materialEditTextVersion"
    
    // Instrumentation tests dependencies
    androidTestCompile("com.android.support.test:runner:$testRunnerVersion") {
        exclude module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: 'design'
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
}

def propertyDefined = project.hasProperty('MyProject.signing')
def fileExists = false

if (propertyDefined)
    fileExists = new File(project.property('MyProject.signing') + '.gradle').exists()

println('propertyDefined("MyProject.signing"): ' + propertyDefined + (propertyDefined? (', fileExists(' + (project.property('MyProject.signing') + '.gradle')  + '): ' + fileExists) : ''))

if (propertyDefined && fileExists) {
    apply from: project.property('MyProject.signing') + '.gradle';
}
